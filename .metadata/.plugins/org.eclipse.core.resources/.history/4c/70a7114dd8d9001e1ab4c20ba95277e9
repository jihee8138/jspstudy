<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
</head>
<body>

<div>
  <button type="button" id="btn1">정보가져오기</button>
</div>
<table border="1">
  <tbody id="contents1"></tbody>
</table>

<hr>

<div>
  <button type="button" id="btn2">정보가져오기</button>
</div>
<table border="1">
  <tbody id="contents2"></tbody>
</table>

<script>
  const getData2 = ()=>{
	  $.ajax({
		  /* 요청에 관련된 프로퍼티 */
		  type: 'GET',
		  url: '/servlet/getData2',
		  /* 응답에 관련된 프로퍼티*/
		  dataType : 'json'     // 'xml', 'json' / application/json이 아님
	  }).done((resData)=>{
		  console.log(resData);
		  
	  }).fail((jqXHR)=>{
		  console.log(jqXHR.responseText + '(' + jqXHR.status + ')');  // 예외사유, 예외코드
	  })
  }
  
  $('#btn2').on('click', getData2);

</script>

<script>

  // XML 데이터 요청
  const getData1= ()=>{
	  const options={
			method: 'GET'
	  }  
	  fetch('/servlet/getData1', options)
	  // fetch의 반환값 : promise. 비동기작업 시 실행이 얼마나 걸리든 실행결과가 돌아오면 보여주겠다
	  // fetch는 promise로 반환되고 fetch 뒤에는 then이 반환된다.
	  // fetch에 들어있는 건 응답객체. then에 들어있는 response는 반환객체
	     // .then(이행함수(응답데이터))
	     /*.then((response) => {
	    	 if(response.ok) {
	    		 return response.text();  // XML 데이터는 텍스트로 받아온다.
	    	 }
	     })*/
	  // XML 데이터는 텍스트로 받아온다.
	  // then도 promise를 반환한다.
	  // then은 순수 xml 데이터가 들어있는 promise가 반환된다.
	     .then(response=>response.text())
	     .then(resData=>{
	    	 // String 타입 resData를 XML Document로 변경하기
	    	 const domParser = new DOMParser();
	    	 const xmlDoc = domParser.parseFromString(resData, 'application/xml');
	    	 
	    	 // <tbody id = "contents1"></tbody>
	    	 const contents1 = document.getElementById('contents1');
	    	 // 화면 초기화 
	    	 contents1.innerHTML = '';
	    	 
 	    	 // 태그에 명시된 속성은 Attribute 라고 부른다.
	    	 // <weather year="2024" month="03" day="04" hour="10">
	    	 const weather = xmlDoc.getElementsByTagName('weather')[0];  // [0] = 첫번째요소만
	    	 contents1.innerHTML += '<tr><td colspan="3">' 
	    		                  + weather.getAttribute('year') + '-'
	    		                  + weather.getAttribute('month') + '-'
	    		                  + weather.getAttribute('day') + '&nbsp'
	    		                  + weather.getAttribute('hour') + '시</td></tr>';
	    		                  
	    	 // <local desc="맑음" ta="4.5">속초</local>
	    	 const locals = xmlDoc.getElementsByTagName('local');
	    	 for(let i = 0; i < locals.length; i++) {
	    		 let str = '<tr>';
	    		 str += '<td>' + locals[i].textContent + '</td>';
	    		 str += '<td>' + locals[i].getAttribute('desc') + '</td>';
	    		 str += '<td>' + locals[i].getAttribute('ta') + '</td>';
	    		 str += '</tr>';
	    		 contents1.innerHTML += str;
	    	 }
	    	 
	    	 // 한시간마다 새로고침하라고 시키는  : trigger + serInterval = 1시간에 한 번씩 클릭해라
	     })
  }
  
  document.getElementById("btn1").addEventListener('click', getData1);
</script>

</body>
</html>